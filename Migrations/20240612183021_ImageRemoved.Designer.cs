// <auto-generated />
using System;
using BoozeClues.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoozeClues.Migrations
{
    [DbContext(typeof(BoozeCluesDbContext))]
    [Migration("20240612183021_ImageRemoved")]
    partial class ImageRemoved
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BoozeClues.Models.CocktailRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GlassTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GlassTypeId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("CocktailRecipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A refreshing tequila-based cocktail with lime juice and Cointreau.",
                            GlassTypeId = 1,
                            Instructions = "Shake all ingredients with ice, then strain into a chilled glass.",
                            Name = "Margarita",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "A classic cocktail made with bourbon, simple syrup, and bitters.",
                            GlassTypeId = 3,
                            Instructions = "Stir ingredients with ice, then strain into a glass over ice.",
                            Name = "Old Fashioned",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "A stylish cocktail featuring vodka, triple sec, lime juice, and cranberry juice.",
                            GlassTypeId = 2,
                            Instructions = "Shake all ingredients with ice, then strain into a chilled glass.",
                            Name = "Cosmopolitan",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "A minty and refreshing cocktail made with rum, lime juice, and soda water.",
                            GlassTypeId = 1,
                            Instructions = "Muddle mint leaves with lime juice and sugar, then add rum and top up with soda water.",
                            Name = "Mojito",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "A tropical cocktail made with rum, coconut cream, and pineapple juice.",
                            GlassTypeId = 1,
                            Instructions = "Blend all ingredients with ice until smooth, then serve in a chilled glass.",
                            Name = "Pina Colada",
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "A classic cocktail made with gin and a touch of blue curacao.",
                            GlassTypeId = 2,
                            Instructions = "Stir ingredients with ice, then strain into a chilled glass.",
                            Name = "Martini",
                            UserProfileId = 6
                        },
                        new
                        {
                            Id = 7,
                            Description = "A fruity cocktail made with rum, maraschino liqueur, peach schnapps, and lemon juice.",
                            GlassTypeId = 4,
                            Instructions = "Shake all ingredients with ice, then strain into a glass over ice.",
                            Name = "Mai Tai",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "A spicy and refreshing cocktail made with vodka, lime juice, and ginger beer.",
                            GlassTypeId = 1,
                            Instructions = "Combine ingredients in a glass with ice, then stir gently.",
                            Name = "Moscow Mule",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "A tangy cocktail made with bourbon, simple syrup, and lemon juice.",
                            GlassTypeId = 3,
                            Instructions = "Shake all ingredients with ice, then strain into a glass over ice.",
                            Name = "Whiskey Sour",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "A sweet and sour cocktail made with rum, simple syrup, and lime juice.",
                            GlassTypeId = 5,
                            Instructions = "Shake all ingredients with ice, then strain into a chilled glass.",
                            Name = "Daiquiri",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 11,
                            Description = "A colorful cocktail made with tequila, orange juice, and grenadine.",
                            GlassTypeId = 1,
                            Instructions = "Pour tequila and orange juice into a glass with ice, then drizzle grenadine on top.",
                            Name = "Tequila Sunrise",
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 12,
                            Description = "A strong cocktail made with vodka, gin, rum, triple sec, lime juice, and soda water.",
                            GlassTypeId = 1,
                            Instructions = "Shake all ingredients except soda water with ice, then strain into a glass and top up with soda water.",
                            Name = "Long Island Iced Tea",
                            UserProfileId = 6
                        },
                        new
                        {
                            Id = 13,
                            Description = "A savory cocktail made with vodka, tomato juice, and lemon juice.",
                            GlassTypeId = 1,
                            Instructions = "Combine ingredients in a glass with ice, then stir gently.",
                            Name = "Bloody Mary",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 14,
                            Description = "A bitter and balanced cocktail made with gin, blue curacao, and bitters.",
                            GlassTypeId = 2,
                            Instructions = "Stir ingredients with ice, then strain into a glass over ice.",
                            Name = "Negroni",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 15,
                            Description = "A vibrant cocktail made with vodka, blue curacao, and orange juice.",
                            GlassTypeId = 2,
                            Instructions = "Shake all ingredients with ice, then strain into a chilled glass.",
                            Name = "Blue Lagoon",
                            UserProfileId = 3
                        });
                });

            modelBuilder.Entity("BoozeClues.Models.GlassType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GlassTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Martini Glass"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Highball Glass"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Old Fashioned Glass"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Collins Glass"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Coupe Glass"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Wine Glass"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Champagne Flute"
                        });
                });

            modelBuilder.Entity("BoozeClues.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAlcoholic = true,
                            Name = "Tequila"
                        },
                        new
                        {
                            Id = 2,
                            IsAlcoholic = false,
                            Name = "Lime Juice"
                        },
                        new
                        {
                            Id = 3,
                            IsAlcoholic = true,
                            Name = "Cointreau"
                        },
                        new
                        {
                            Id = 4,
                            IsAlcoholic = true,
                            Name = "Bourbon"
                        },
                        new
                        {
                            Id = 5,
                            IsAlcoholic = false,
                            Name = "Simple Syrup"
                        },
                        new
                        {
                            Id = 6,
                            IsAlcoholic = true,
                            Name = "Vodka"
                        },
                        new
                        {
                            Id = 7,
                            IsAlcoholic = true,
                            Name = "Gin"
                        },
                        new
                        {
                            Id = 8,
                            IsAlcoholic = true,
                            Name = "Rum"
                        },
                        new
                        {
                            Id = 9,
                            IsAlcoholic = true,
                            Name = "Triple Sec"
                        },
                        new
                        {
                            Id = 10,
                            IsAlcoholic = false,
                            Name = "Orange Juice"
                        },
                        new
                        {
                            Id = 11,
                            IsAlcoholic = false,
                            Name = "Cranberry Juice"
                        },
                        new
                        {
                            Id = 12,
                            IsAlcoholic = false,
                            Name = "Pineapple Juice"
                        },
                        new
                        {
                            Id = 13,
                            IsAlcoholic = false,
                            Name = "Ginger Beer"
                        },
                        new
                        {
                            Id = 14,
                            IsAlcoholic = false,
                            Name = "Mint Leaves"
                        },
                        new
                        {
                            Id = 15,
                            IsAlcoholic = true,
                            Name = "Bitters"
                        },
                        new
                        {
                            Id = 16,
                            IsAlcoholic = false,
                            Name = "Soda Water"
                        },
                        new
                        {
                            Id = 17,
                            IsAlcoholic = false,
                            Name = "Tonic Water"
                        },
                        new
                        {
                            Id = 18,
                            IsAlcoholic = false,
                            Name = "Lemon Juice"
                        },
                        new
                        {
                            Id = 19,
                            IsAlcoholic = true,
                            Name = "Maraschino Liqueur"
                        },
                        new
                        {
                            Id = 20,
                            IsAlcoholic = true,
                            Name = "Peach Schnapps"
                        },
                        new
                        {
                            Id = 21,
                            IsAlcoholic = false,
                            Name = "Grenadine"
                        },
                        new
                        {
                            Id = 22,
                            IsAlcoholic = true,
                            Name = "Blue Curacao"
                        },
                        new
                        {
                            Id = 23,
                            IsAlcoholic = true,
                            Name = "Amaretto"
                        },
                        new
                        {
                            Id = 24,
                            IsAlcoholic = true,
                            Name = "Kahlua"
                        },
                        new
                        {
                            Id = 25,
                            IsAlcoholic = false,
                            Name = "Coconut Cream"
                        });
                });

            modelBuilder.Entity("BoozeClues.Models.RecipeIngredient", b =>
                {
                    b.Property<int>("CocktailRecipeId")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CocktailRecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipeIngredients");

                    b.HasData(
                        new
                        {
                            CocktailRecipeId = 1,
                            IngredientId = 1,
                            Quantity = "2 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 1,
                            IngredientId = 2,
                            Quantity = "1 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 1,
                            IngredientId = 3,
                            Quantity = "1 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 2,
                            IngredientId = 4,
                            Quantity = "2 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 2,
                            IngredientId = 5,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 2,
                            IngredientId = 15,
                            Quantity = "2 dashes"
                        },
                        new
                        {
                            CocktailRecipeId = 3,
                            IngredientId = 6,
                            Quantity = "1.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 3,
                            IngredientId = 9,
                            Quantity = "1 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 3,
                            IngredientId = 2,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 3,
                            IngredientId = 11,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 4,
                            IngredientId = 8,
                            Quantity = "1.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 4,
                            IngredientId = 5,
                            Quantity = "1 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 4,
                            IngredientId = 2,
                            Quantity = "1 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 4,
                            IngredientId = 14,
                            Quantity = "10 leaves"
                        },
                        new
                        {
                            CocktailRecipeId = 4,
                            IngredientId = 16,
                            Quantity = "Top up"
                        },
                        new
                        {
                            CocktailRecipeId = 5,
                            IngredientId = 8,
                            Quantity = "2 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 5,
                            IngredientId = 25,
                            Quantity = "1 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 5,
                            IngredientId = 12,
                            Quantity = "1 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 6,
                            IngredientId = 7,
                            Quantity = "2 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 6,
                            IngredientId = 22,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 7,
                            IngredientId = 8,
                            Quantity = "1 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 7,
                            IngredientId = 19,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 7,
                            IngredientId = 20,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 7,
                            IngredientId = 18,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 8,
                            IngredientId = 6,
                            Quantity = "2 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 8,
                            IngredientId = 2,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 8,
                            IngredientId = 13,
                            Quantity = "Top up"
                        },
                        new
                        {
                            CocktailRecipeId = 9,
                            IngredientId = 4,
                            Quantity = "2 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 9,
                            IngredientId = 5,
                            Quantity = "0.75 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 9,
                            IngredientId = 18,
                            Quantity = "0.75 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 10,
                            IngredientId = 8,
                            Quantity = "2 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 10,
                            IngredientId = 5,
                            Quantity = "0.75 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 10,
                            IngredientId = 2,
                            Quantity = "0.75 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 11,
                            IngredientId = 1,
                            Quantity = "2 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 11,
                            IngredientId = 10,
                            Quantity = "4 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 11,
                            IngredientId = 21,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 12,
                            IngredientId = 6,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 12,
                            IngredientId = 7,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 12,
                            IngredientId = 8,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 12,
                            IngredientId = 9,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 12,
                            IngredientId = 2,
                            Quantity = "0.75 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 12,
                            IngredientId = 16,
                            Quantity = "Top up"
                        },
                        new
                        {
                            CocktailRecipeId = 13,
                            IngredientId = 6,
                            Quantity = "2 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 13,
                            IngredientId = 10,
                            Quantity = "4 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 13,
                            IngredientId = 18,
                            Quantity = "0.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 14,
                            IngredientId = 7,
                            Quantity = "1 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 14,
                            IngredientId = 22,
                            Quantity = "1 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 14,
                            IngredientId = 15,
                            Quantity = "1 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 15,
                            IngredientId = 6,
                            Quantity = "1.5 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 15,
                            IngredientId = 22,
                            Quantity = "1 oz"
                        },
                        new
                        {
                            CocktailRecipeId = 15,
                            IngredientId = 10,
                            Quantity = "Top up"
                        });
                });

            modelBuilder.Entity("BoozeClues.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "John",
                            IdentityUserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Jane",
                            IdentityUserId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Alice",
                            IdentityUserId = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Bob",
                            IdentityUserId = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Eve",
                            IdentityUserId = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            LastName = "Davis"
                        });
                });

            modelBuilder.Entity("CocktailRecipeIngredient", b =>
                {
                    b.Property<int>("CocktailRecipesId")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientsId")
                        .HasColumnType("integer");

                    b.HasKey("CocktailRecipesId", "IngredientsId");

                    b.HasIndex("IngredientsId");

                    b.ToTable("CocktailRecipeIngredient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9223dd4-9b34-4aa9-b418-034e44e5dfd9",
                            Email = "admina@strator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHr1CtolMAkaxBDWhYK5hr+e0uRhWulZmbfDmAPxmzgqPlVNcMFX4b8pRgLdRxyYmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2bb34d0d-ee84-495f-bb0b-dab2370fb2ea",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b2489a4-b47b-48da-8fde-fc265d750e0a",
                            Email = "john@doe.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEL6cqaDD+ZUEx2CmMyVGTZpOqc/0G6YvQgYeOW2LINWKv/ILsXhuzLDwhU9UQ2q5ag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "503bac38-5755-4fdb-8776-683c81c4ee88",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe"
                        },
                        new
                        {
                            Id = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e07d51e-83f1-4b6e-be3b-48b9632cf8d6",
                            Email = "jane@smith.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPeVwC+VsRZE47xgZ56YNOUZ59mNVI4BTZob5L46DesEA9dPB6oyb13UTah757S3Pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df3f8ab4-805e-4a71-b6b3-0b28409fb6fe",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith"
                        },
                        new
                        {
                            Id = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "168e53e7-f616-402e-ad55-fcc025167534",
                            Email = "alice@johnson.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGi63GW7ECgfibiAKh9reTqqRVis04/3TbTnCMa2bZh8gsUhlFGgrJN2gZZjKFz7vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fff68067-b354-4807-85fa-d1d3e1e0cc95",
                            TwoFactorEnabled = false,
                            UserName = "AliceJohnson"
                        },
                        new
                        {
                            Id = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3276d9f8-105a-4205-975d-d18cddc55c35",
                            Email = "bob@williams.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELANY2lw6qpvF6/oCzCeQKuBp8QG0d7Yjm0EUDpdUMY0h2JQzkS4mYq8Kxd59J/tOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a425955d-4d2c-45c6-b7bc-e8088581a104",
                            TwoFactorEnabled = false,
                            UserName = "BobWilliams"
                        },
                        new
                        {
                            Id = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f332ecee-e9c1-4bec-913f-0f6fcfbcf649",
                            Email = "eve@davis.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECJRkR2rb2x8JuRZg+5wKfIfTGe3bGJ2S+oHQB8oWwJxc4RUWltJBxul0+MCgL5VKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82ae0de3-556d-4ca7-9217-0b9a22952cf4",
                            TwoFactorEnabled = false,
                            UserName = "EveDavis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoozeClues.Models.CocktailRecipe", b =>
                {
                    b.HasOne("BoozeClues.Models.GlassType", "GlassType")
                        .WithMany("CocktailRecipe")
                        .HasForeignKey("GlassTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoozeClues.Models.UserProfile", "UserProfile")
                        .WithMany("CocktailRecipes")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlassType");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BoozeClues.Models.RecipeIngredient", b =>
                {
                    b.HasOne("BoozeClues.Models.CocktailRecipe", "CocktailRecipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("CocktailRecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoozeClues.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CocktailRecipe");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("BoozeClues.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("CocktailRecipeIngredient", b =>
                {
                    b.HasOne("BoozeClues.Models.CocktailRecipe", null)
                        .WithMany()
                        .HasForeignKey("CocktailRecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoozeClues.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoozeClues.Models.CocktailRecipe", b =>
                {
                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("BoozeClues.Models.GlassType", b =>
                {
                    b.Navigation("CocktailRecipe");
                });

            modelBuilder.Entity("BoozeClues.Models.UserProfile", b =>
                {
                    b.Navigation("CocktailRecipes");
                });
#pragma warning restore 612, 618
        }
    }
}
